---
number-depth: 0
---

# Cirkeldiagram {.unnumbered}

```{r}
#| echo: FALSE
#| warning: FALSE

library(plotly)
 
# Maak een subfunctie aan met de naam 'maak_cirkeldiagram'. 
maak_cirkeldiagram <- function(data, var_categorie, var_waarde,
                               titel = "",
                               kleuren,
                               alt_text = NULL) {
  
  # Ensure the data is sorted according to the order of the 'kleuren' vector
  data <- data[match(names(kleuren), data[[var_categorie]]), ] %>% 
    mutate(percentage = round(!!sym(var_waarde) / sum(!!sym(var_waarde)) * 100))

 
  # Create the plotly pie chart
  fig <- plot_ly(data,
                 labels = ~get(var_categorie),
                 textinfo = "~round(percent)",
                 values = ~percentage, 
                 type = "pie",
                 hoverinfo = "text",
                 text = "",
                 direction = "clockwise",
                 sort = FALSE,
                 marker = list(colors = kleuren[data[[var_categorie]]],
                               line = list(color = "#FFFFFF", width = 1)),
                 insidetextfont = list(
                   color = "#FFFFFF",
                   size = 15
                 ),
                 outsidetextfont = list(
                   color = "#000000",
                   size = 15
                 )
  ) %>% 
    layout(title = list(text = titel,
                        font = list(size = 15)),
           margin = list(t = 100)
    ) %>% 
    config(staticPlot = TRUE)
  
  # Add alt text if provided
  if (!is.null(alt_text)) {
    fig <- fig %>% htmlwidgets::onRender(glue::glue("
      function(el, x) {{
        el.setAttribute('alt', '{alt_text}');
      }}"))
  }
  fig
}
 
```

```{r}
#| echo: FALSE
#| warning: FALSE

# Maak een dataframe aan
data_leeftijd <- data.frame(
  indicator = c("34 jaar en jonger", "35 - 49 jaar", "50 - 64 jaar", "65 - 74 jaar", "75 jaar of ouder"),
  waarde = c(444, 1190, 2319, 3243, 2583)
)
 
# Ken kleuren toe aan de categorieen
kleuren <- c("34 jaar en jonger" = "#1a2c54", 
             "35 - 49 jaar" = "#8bca35", 
             "50 - 64 jaar" = "#fec80f", 
             "65 - 74 jaar" = "#72D5FF", 
             "75 jaar of ouder" = "#76428B")
 
# Maak de cirkeldiagram met de eerder aangemaakte 'maak_cirkeldiagram'-functie.
maak_cirkeldiagram(data = data_leeftijd,
                   var_categorie = "indicator",
                   var_waarde = "waarde",
                   kleuren = kleuren)

```

## Subfunctie maken
Je kunt een cirkeldiagram maken met de veelgebruikte ggplot2 package. Deze ordent de kleuren echter tegen de klok in, terwijl wij gewend zijn het met de klok mee te lezen. Een betere optie is de plotly package. Onderstaande code maakt een functie `maak_cirkeldiagram` aan. Deze heeft 6 input-parameters, waarvan 2 optioneel. De input-parameters zijn: 

* __data__: een dataframe waar de data in staat  
* __var_categorie__: De naam van een kolom in de data die aangeeft tot welke categorie een datapunt behoort  
* __var_waarde__: De naam van een kolom in de data waarop de grootte van de schijven in het cirkeldiagram bepaald wordt  
* __titel__ (optioneel): Titel voor boven het cirkeldiagram  
* __kleuren__: Een zogeheten 'named vector', die aangeeft welke kleur toegewezen wordt aan welke categorie  
* __alt-text__ (optioneel): Een alternatieve tekst voor het cirkeldiagram  

```{{r}}
#| echo: FALSE
#| warning: FALSE

library(plotly)
 
# Maak een subfunctie aan met de naam 'maak_cirkeldiagram'. 
maak_cirkeldiagram <- function(data, 
                               var_categorie, 
                               var_waarde,
                               titel = "",
                               kleuren,
                               alt_text = NULL) {
  
  # Sorteer de 'kleuren' vector naar de volgorde opgegeven in de kleuren input parameter
  data <- data[match(names(kleuren), data[[var_categorie]]), ] %>% 
    mutate(percentage = round(!!sym(var_waarde) / sum(!!sym(var_waarde)) * 100))

 
  # Maak een plotly taartdiagram aan
  fig <- plot_ly(data,
                 labels = ~get(var_categorie),
                 textinfo = "~round(percent)",
                 values = ~percentage, 
                 type = "pie",
                 hoverinfo = "text",
                 text = "",
                 direction = "clockwise",
                 sort = FALSE,
                 marker = list(colors = kleuren[data[[var_categorie]]],
                               line = list(color = "#FFFFFF", width = 1)),
                 insidetextfont = list(
                   color = "#FFFFFF",
                   size = 15
                 ),
                 outsidetextfont = list(
                   color = "#000000",
                   size = 15
                 )
  ) %>% 
    layout(title = list(text = titel,
                        font = list(size = 15)),
           margin = list(t = 100)
    ) %>% 
    config(staticPlot = TRUE)
  
  # Add alt text if provided
  if (!is.null(alt_text)) {
    fig <- fig %>% htmlwidgets::onRender(glue::glue("
      function(el, x) {{
        el.setAttribute('alt', '{alt_text}');
      }}"))
  }
  fig
}
 
```



## Subfunctie toepassen
Bovenstaande code maakt alleen de functie aan. Deze functie moet vervolgens nog toegepast worden op data. Hieronder een voorbeeld voor het maken van een dataframe met wat data, het maken van een R object (named vector) waarin kleuren worden toegewezen aan categorieen die voorkomen in de data en als laatste het toepassen van de functie zelf.

```{{r}}
#| echo: FALSE
#| warning: FALSE

# Maak een dataframe aan
data_leeftijd <- data.frame(
  indicator = c("34 jaar en jonger", "35 - 49 jaar", "50 - 64 jaar", "65 - 74 jaar", "75 jaar of ouder"),
  waarde = c(444, 1190, 2319, 3243, 2583)
)
 
# Ken kleuren toe aan de categorieen
kleuren <- c("34 jaar en jonger" = "#1a2c54", 
             "35 - 49 jaar" = "#8bca35", 
             "50 - 64 jaar" = "#fec80f", 
             "65 - 74 jaar" = "#72D5FF", 
             "75 jaar of ouder" = "#76428B")
 
# Maak de cirkeldiagram met de eerder aangemaakte 'maak_cirkeldiagram'-functie.
maak_cirkeldiagram(data = data_leeftijd,
                   var_categorie = "indicator",
                   var_waarde = "waarde",
                   kleuren = kleuren)

```

